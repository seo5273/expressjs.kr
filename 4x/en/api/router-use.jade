section
  h3(id='router.use') router.use([path], function)
  
  p.
    라우터에 미들웨어를 로드합니다. 미들웨어는 <code>function</code>입니다. (<code>경로</code>를 지정할 수 있습니다. 경로의 기본값은 "/"입니다.)

  +js.
    var express = require('express');
    var app = express();
    var router = express.Router();

    // simple logger for this router's requests
    // all requests to this router will first hit this middleware
    router.use(function(req, res, next) {
      console.log('%s %s %s', req.method, req.url, req.path);
      next();
    });

    // this will only be invoked if the path ends in /bar
    router.use('/bar', function(req, res, next) {
      // ... maybe some additional /bar logging ...
      next();
    });

    // always invoked
    router.use(function(req, res, next) {
      res.send('Hello World');
    });

    app.use('/foo', router);

    app.listen(3000);

  p.
    경로는 미들웨어와 아무런 관계가 없습니다. 즉 경로를 바꾸어도 미들웨어의 코드의 수정은 필요치 않습니다.

  p.
    <code>router.use()</code>을 사용하여 정의 된 미들웨어의 순서는, 미들웨어의 우선순위를 정하기 때문에 매우 중요하며, 미들웨어는 이 순서대로 호출됩니다.
    예를 들어, 대체로 로깅 미들웨어는 다른 미들웨어 보다 가장 상단에 설정됩니니다.

  +js.
    var logger = require('morgan');

    router.use(logger());
    router.use(express.static(__dirname + '/public'));
    router.use(function(req, res){
      res.send('Hello');
    });

  p.
    만약 정적 파일을 제공할 때는 로깅 요청을 무시하고, <code>logger()</code> 후에 미들웨어 정의를 계속 하고 싶다면,
    <code>static()</code>을 logger 위로 옮기세요.

  +js.
    router.use(express.static(__dirname + '/public'));
    router.use(logger());
    router.use(function(req, res){
      res.send('Hello');
    });

  p.
    아래 예제는 여러 디렉토리에서 정적 파일을 제공할 경우 다른 디렉토리보다 "./public"에 맨 처음 우선순위를 줍니다.
    즉, 먼저 public 디렉토리를 살펴보고, 이후에 files를, 마지막으로 uploads를 살펴봅니다.

  +js.
    router.use(express.static(__dirname + '/public'));
    router.use(express.static(__dirname + '/files'));
    router.use(express.static(__dirname + '/uploads'));
