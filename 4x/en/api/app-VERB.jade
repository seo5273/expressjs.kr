section
  h3(id='app.VERB') app.VERB(path, [callback...], callback)

  p.
    <code>app.VERB()</code> 메소드는 Express 안의 <code>app.post()</code>과 같은
    HTTP verb 중 하나인 <strong>VERB</strong>의 라우팅 기능을 제공합니다. 
    똑같이 취급되는 여러 콜백들이 주어지고, 미들웨어 같은 역할을 합니다.
    남은 루트 콜백들을 우회하기 위하여 
    한 예외를 제외하고는 이 콜백들은 <code>next('route')</code>를 호출합니다. 
    with the route matched.
    이 방법은 사전 조건을 수행하기 위해여 루트에 쓰일 수 있으며, 매치되는 루트에 계속 진행 할 이유가 없어 질 때에
    이후 루트들에 통제권을 넘깁니다. 

  p.
    아래는 가능한 가장 단순한 루트 정의를 보여줍니다.
    Express는 path 문자열을 정규식으로 변환 시켜주며, 내부적으로 새로 들어오는 요청을 매치시키기 위하여 사용됩니다. 
    쿼리 문자열은 이러한 매치를 수행하는 데 고려되지 <em>않습니다.</em>
    예를 들어 "GET /"는 "GET /?name=tobi"처럼 다음 루트를 매칭시킵니다.    

  +js.
    app.get('/', function(req, res){
      res.send('hello world');
    });

  p.
    예를 들어 아래 "GET /commits/71dbb9c..4c084f9" 뿐만 아니라 "GET /commits/71dbb9c"가 매칭하는 것 처럼
    특별한 통제가 필요할 경우 정규식 또한 유용하게 사용 될 수 있습니다.

  +js.
    app.get(/^\/commits\/(\w+)(?:\.\.(\w+))?$/, function(req, res){
      var from = req.params[0];
      var to = req.params[1] || 'HEAD';
      res.send('commit range ' + from + '..' + to);
    });

  p.
    여러 콜백을 넘기고, 리소스를 불러오는 미들웨어를 다시 사용 하는 데에 유용하며, 유효성 검사 등을 수행합니다.

  +js.
    app.get('/user/:id', user.load, function(){
      // ... 
    })

  p.
    루트 하나에 여러 공동 미들웨어가 있다면, <code>all</code>를 이용하여 루트 API를 사용 할 수 있습니다.

  +js.
    var middleware = [loadForum, loadThread];

    app.route('/forum/:fid/thread/:tid')
    .all(loadForum)
    .all(loadThread)
    .get(function() { //... });
    .post(function() { //... });

  p.
    GET and POST 요청을 위해 두 미들웨어가 수행됩니다. 
