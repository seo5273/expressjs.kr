section
  h3(id='router.param') router.param([name], callback)
  
  p.
    논리(logic)을 루트 파라미터로 맵핑합니다.
    예를 들어 루트 경로 안에 <code>:user</code>가 존재하가면, 류저 로딩 논리를 자동적으로 <code>req.user</code>을 루트에 제공하기 위하거나
    입력 파라미터 값의 유효성 검사를 수행하기 위해 맵핑 할 수 있습니다. 

  p.

    아래는 어떻게 <code>callback</code>가 미들웨어 같이 행동하여 asnc operation을 지원하는 지를 보여줍니다.
    그러나 이는 파라미터의 부가적인 값을 제공합니다. (여기에서는 <code>id</code>).
    그 후 유저를 불러오려는 시도가 수행되며, 이는 <code>req.user</code>를 할당합니다.
    그렇지 않은 경우에는 <code>next(err)</code>로 에러를 넘깁니다.


  p.
    <code>next</code>가 이름있는 파라미터 핸들러(named parameter handler) 안에 에러가 호출 되지 않는다면,
    실행하기 위한 이름이 있는 파라미터 함수(named paramter funcion)를 유발하는 루트가 실행 됩니다.

  +js.
    router.param('user', function(req, res, next, id){
      User.find(id, function(err, user){
        if (err) {
          return next(err);
        }
        else if (!user) {
          return next(new Error('failed to load user'));
        }

        req.user = user;
        next();
      });
    });

    // this route uses the ":user" named parameter
    // which will cause the 'user' param callback to be triggered
    router.get('/users/:user', function(req, res, next) {
      // req.user WILL be defined here
      // if there was an error, normal error handling will be triggered
      // and this function will NOT execute
    });

  p.
    그 대신에 <code>callback</code>만을 넘길 수 있으며, 이 경우는 <code>router.param()</code> API를 수정 할 수 있는 기회가 생깁니다.
    예를 들어, <a href="http://github.com/visionmedia/express-params">express-params</a>는 파라미터를 주어진 정규식에 제한하게 해주는 
    아래 콜백을 정의합니다. 


  p.
    아래 예제는 두번째 argument가 정규식인지 확인하며, "user" param 예제 처럼 행동하는 콜백을 반환하는 것을 보여주는
    응용 예제입니다.

  +js.
    router.param(function(name, fn){
      if (fn instanceof RegExp) {
        return function(req, res, next, val){
          var captures;
          if (captures = fn.exec(String(val))) {
            req.params[name] = captures;
            next();
          } else {
            next('route');
          }
        }
      }
    });

  p.

    이 메소드는 파라미터의 유효성을 검사하거나 캡쳐 그룹(capture groups)을 제공하기 위해 파싱하는 데에도 유용합니다.

  +js.
    router.param('id', /^\d+$/);

    router.get('/user/:id', function(req, res){
      res.send('user ' + req.params.id);
    });

    router.param('range', /^(\w+)\.\.(\w+)?$/);

    router.get('/range/:range', function(req, res){
      var range = req.params.range;
      res.send('from ' + range[1] + ' to ' + range[2]);
    });

  p.
    <code>router.use()</code> 메소드는 또한 이름이 있는 파라미터(named parameter)을 지원하여, 다른 라우터를 위한
    마운트 포인트가 이름 있는 파라미터를 사용하여 프리로딩 하는 에게 이득이 되도록 해줍니다.

