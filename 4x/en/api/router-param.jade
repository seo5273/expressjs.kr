section
  h3(id='router.param') router.param([name], callback)
  
  p.
    파라미터에 특정 로직을 반영합니다.
    예를 들어, <code>:user</code>가 경로에 있을 때 <code>req.user</code>에 자동으로 유저 정보를 저장하거나, 파라미터 입력값의 유효성을 검사하는 등의 일을 수행할 수 있습니다. 

  p.
    아래는 <code>callback</code>이 얼마나 미들웨어와 비슷한지 보여줍니다.
    비동기 작업을 지원하고, 파라미터의 값을 <code>id</code>로 제공하는 모습을 보여줍니다. 예를들어, <code>:user</code>에 hanul이 넘어오면, id의 값은 "hanul"이 됩니다.
    유저 정보를 불러오고, <code>req.user</code>에 할당합니다. 오류가 발생하면 오류를 <code>next(err)</code>와 같이 넘깁니다. 

  +js.
    router.param('user', function(req, res, next, id){
      User.find(id, function(err, user){
        if (err) {
          return next(err);
        }
        else if (!user) {
          return next(new Error('failed to load user'));
        }

        req.user = user;
        next();
      });
    });

    // this route uses the ":user" named parameter
    // which will cause the 'user' param callback to be triggered
    router.get('/users/:user', function(req, res, next) {
      // req.user WILL be defined here
      // if there was an error, normal error handling will be triggered
      // and this function will NOT execute
    });

  p.
    다른 방법으론, <code>callback</code>만 넘기는 방법이 있는데, 이 경우에는 <code>router.param()</code> API를
    변경할 수 있습니다.
    예를 들어, <a href="http://github.com/visionmedia/express-params">express-params</a>는
    아래 주어진 정규식으로 파라미터를 제한하는 콜백을 정의합니다.

  p.
    아래 예제는 두 번째 argument인 fn이 정규식인지 확인하고, 값이 정규식을 통과했을 경우에만 req.params[name]에 값을 반영한 뒤 다음으로 넘어갑니다.

  +js.
    router.param(function(name, fn){
      if (fn instanceof RegExp) {
        return function(req, res, next, val){
          var captures;
          if (captures = fn.exec(String(val))) {
            req.params[name] = captures;
            next();
          } else {
            next('route');
          }
        }
      }
    });

  p.
    이는 파라미터들의 유효성 검사 등을 할 때 효과적으로 쓰입니다.

  +js.
    router.param('id', /^\d+$/);

    router.get('/user/:id', function(req, res){
      res.send('user ' + req.params.id);
    });

    router.param('range', /^(\w+)\.\.(\w+)?$/);

    router.get('/range/:range', function(req, res){
      var range = req.params.range;
      res.send('from ' + range[1] + ' to ' + range[2]);
    });


