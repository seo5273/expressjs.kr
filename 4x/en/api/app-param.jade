section
  h3(id='app.param') app.param([name], callback)
  
  p.
    로직(logic)을 라우트 파라미터로 맵핑합니다.
    예를 들어, <code>:user</code>가 라우트 경로에 있을 때, 
    자동적으로 <code>req.user</code>을 자동적으로 제공하기 위해서 유저 로딩 로직(user loading logic)을
    라우트로 맵핑하거나, 파라미터의 입력값의 유효성을 검사 할 수 있습니다. 

  p.
    아래는 <code>callback</code>가 얼마나 미들웨어랑 비슷한 지를 보여줍니다.
    그러므로 아래는 비동기 오퍼레이션(async operations)을 지원하고 파라미터의 부가적인 값(여기서는 <code>id</code>)들을 
    제공하는 것을 보여줍니다.  
    User을 불러오는 것이 시도가 실행 되었고, <code>req.user</code>를 할당합니다. 그렇지 않으면 에러를 <code>next(err)</code>로 넘깁니다. 
    

  +js.
    app.param('user', function(req, res, next, id){
      User.find(id, function(err, user){
        if (err) {
          next(err);
        } else if (user) {
          req.user = user;
          next();
        } else {
          next(new Error('failed to load user'));
        }
      });
    });

  p.
    다른 방법으론, <code>callback</code>만 넘기는 방법이 있는데, 이 경우에는 <code>app.param()</code> API를
    변경 할 수 있습니다.
    예를 들어, <a href="http://github.com/visionmedia/express-params">express-params</a>는
    아래 주어진 정규식으로 파라미터를 제한 할 수 있는 콜백을 정의 해 줍니다.

  p.
    아래 예제는 두 번째 argument가 정규식인지 확인하고, "user" param 예제 같은 역할의 콜백을 반환해주는 것을 보여주는 응용 예제 입니다.

  +js.
    app.param(function(name, fn){
      if (fn instanceof RegExp) {
        return function(req, res, next, val){
          var captures;
          if (captures = fn.exec(String(val))) {
            req.params[name] = captures;
            next();
          } else {
            next('route');
          }
        }
      }
    });

  p.
    이 메소드는 파라미터들의 유효성 검사나 캡쳐 그룹(capture groups)을 제공하기 위해 파싱 할 때 효과적으로 쓰입니다.

  +js.
    app.param('id', /^\d+$/);

    app.get('/user/:id', function(req, res){
      res.send('user ' + req.params.id);
    });

    app.param('range', /^(\w+)\.\.(\w+)?$/);

    app.get('/range/:range', function(req, res){
      var range = req.params.range;
      res.send('from ' + range[1] + ' to ' + range[2]);
    });