section
  h3(id='app.use') app.use([path], function)

  p.
    주어진 middleware <code>function</code>와 선택적 마운트(optional mount) <code>path</code>를 사용합니다.
    기본 값은 "/"입니다.

  +js.
    var express = require('express');
    var app = express();

    // simple logger
    app.use(function(req, res, next){
      console.log('%s %s', req.method, req.url);
      next();
    });

    // respond
    app.use(function(req, res, next){
      res.send('Hello World');
    });

    app.listen(3000);

  p.
    "마운트" 경로는 stripped되어 있으며, 미들웨어 <code>function</code>에서 <strong>보이지 않습니다.</strong>
    이 것의 가장 큰 특징은 마운트 된 미들웨어는 "prefix"의 경로 이름에 관계 없이 코드의 수정 없이도
    작동 할 수 있다는 것입니다.  

  p.
    아래의 예제는 <code>express.static()</code> 미들웨어를 사용하여
    ./public 안의 사용 파일(serving file)의 전형적인 Use-case(typical use-case)를 받습니다.  

  +js.
    // GET /javascripts/jquery.js
    // GET /style.css
    // GET /favicon.ico
    app.use(express.static(__dirname + '/public'));

  p.
    예를 들어, 모든 정적 파일에 "/static"이라고 prefix를 하고 싶다면, "마운팅" 특징을 이용하여 지원 할 수 있습니다.
    마운트 된 미들웨어 함수는 함수가 호출 되어 있을 때 stripped 되어 있지 않은 상태의
    <code>req.url</code>가 이 prefix를 포함하고 있지 않으면 <strong>호출 되지 않습니다.</strong>
 
    이 것은 함수에만 영향을 끼치며, 그 이후 미들웨어는 마운트 되지 않은 이상 "/static"이 포함된 <code>req.url</code>를
    볼 수 있습니다. 

  +js.
    // GET /static/javascripts/jquery.js
    // GET /static/style.css
    // GET /static/favicon.ico
    app.use('/static', express.static(__dirname + '/public'));

  p.
    <code>app.use()</code>을 사용하여 "정의 된" 미들웨어의 순서는 매우 중요하며, 미들웨어는 순서대로 호출됩니다.
    그러므로 이 것은 미들웨어의 우선순위를 정의합니다.
    예를 들어, 대체로 로깅 미들웨어는 다른 미들웨어 보다 가장 먼저 나옵니다.

  +js.
    var logger = require('morgan');

    app.use(logger());
    app.use(express.static(__dirname + '/public'));
    app.use(function(req, res){
      res.send('Hello');
    });

  p.
    만약 정적 파일을 위한 로깅 요청을 무시하고, <code>logger()</code> 후에 로깅 라우트나 미들웨어 정의를 계속 하고 싶다면,
    위의 <code>static()</code>로 이동하세요.

  +js.
    app.use(express.static(__dirname + '/public'));
    app.use(logger());
    app.use(function(req, res){
      res.send('Hello');
    });

  p.
    다른 예제는 여러 디렉토리의 사용 파일(serving files)가 다른 것들보다 "./public"에 우선순위를 주는 것입니다.

  +js.
    app.use(express.static(__dirname + '/public'));
    app.use(express.static(__dirname + '/files'));
    app.use(express.static(__dirname + '/uploads'));
