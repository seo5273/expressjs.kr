section
  h3(id='app.engine') app.engine(ext, callback)

  p.
    템플릿 엔진의 <code>callback</code>을 <code>ext</code>로 등록합니다.
    기본적으로 파일 확장자에 기반해 엔진을 구동합니다.
    예를 들어, "foo.jade"파일을 호출할 때, Express는 내부적으로 아래 코드를 실행하며,
    성능을 향상시키기 위해 이후의 호출들은 <code>require()</code>를 캐싱합니다.

  +js.
    app.engine('jade', require('jade').__express);

  p.
    Express에서 간단히 쓸 수 있도록 <code>.__express</code> 기능을 제공 하지 않는 엔진을 사용할 경우,
    이 방법을 이용하세요. 예를 들어 ".html"파일을 불러올 때 EJS 템플릿 엔진을 사용하고 싶다면, 아래와 같이 설정합니다.
  
  +js.
    app.engine('html', require('ejs').renderFile);

  p.
    이 경우는 EJS가 Express에서 사용할 수 있게끔 <code>(path, options, callback)</code>를 파라미터로 가지는
    <code>.renderFile()</code> 메소드를 제공하는 경우입니다.
    
    그러나 사실 이 메소드는 내부적으로 <code>ejs.__express</code>를 부르고, ".ejs"확장자를 사용한다면
    아무런 설정도 하지 않아도 됩니다. 

  p.
    어떤 템플릿 엔진는 이러한 방식을 따르지 않습니다. 
    <a href="https://github.com/visionmedia/consolidate.js">consolidate.js</a>
    라이브러리는 노드 진영에서 널리 쓰이는 템플릿 엔진들이 이러한 방식을 따르도록 감싸기 위해 만들어졌습니다.
    
  +js.
    var engines = require('consolidate');
    app.engine('haml', engines.haml);
    app.engine('html', engines.hogan);
    // 어때요, 참 쉽죠?
