section
  h3(id='app.engine') app.engine(ext, callback)

  p.
    주어진 템플릿 엔진(template engine) <code>callback</code>을 <code>ext</code>로 등록합니다.
    기본 값은 파일 확장자에 기반한 엔진을 필요로 합니다.
    예를 들어, "foo.jade"파일을 만들 때(render), Express는 내부적으로 아래를 호출하며,
    성능을 증가시키기 위해 이후의 콜들의 <code>require()</code>을 캐싱합니다.

  +js.
    app.engine('jade', require('jade').__express);

  p.
    Box 외부의 <code>.__express</code>를 제공 하지 않는 엔진이나, 혹은
    다른 확장을 (different extension) 템플릿 엔진(template engine)으로 맵핑(map) 시키고 싶다면,
    이 방법을 이용하세요. 예를 들어 EJS 템플릿 엔진을 ".html" files:로 맵핑 시킬 때는,
  
  +js.
    app.engine('html', require('ejs').renderFile);

  p.
    이런 경우에는 Express가 기대하는 <code>(path, options, callback)</code> 같은 서명을 가진 
    <code>.renderFile()</code> 메소드를 제공합니다.
    
    그러나 이 메소드는 내부적으로 <code>ejs.__express</code>라고 불려지고, ".ejs"확장자를 사용한다면
    아무 것도 하지 않아도 된다는 걸 알아두세요. 

  p.
    어떤 템플릿 엔진(template engines)는 이러한 방식을 따르지 않습니다. 
    <a href="https://github.com/visionmedia/consolidate.js">consolidate.js</a>
    라이브러리는 모든 노드의 널리 쓰이는 템플릿 엔진이 이러한 방식을 따르도록 맵핑 시키기 위해 만들어졌고,
    이 때문에 Express 안에 비슷하게 사용됩니다.
    
  +js.
    var engines = require('consolidate');
    app.engine('haml', engines.haml);
    app.engine('html', engines.hogan);
