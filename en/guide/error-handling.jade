section
  h3(id='error-handling') 오류 처리

  p.
    오류 처리 미들웨어는 다른 미들웨어와 같은 방법으로 정의되지만, 
    특히 오류 처리 미들웨어에 대해서는 4개의 argument <code>(err, req, res, next)</code>로 정의되어야 합니다.

  +js.
    app.use(function(err, req, res, next){
      console.error(err.stack);
      res.send(500, 'Something broke!');
    });

  p.
    오류 처리 미들웨어는 보통 아래와 같이 <code>app.use()</code>마지막에 선언합니다.

  +js.
    var bodyParser = require('body-parser');
    var methodOverride = require('method-override');

    app.use(bodyParser());
    app.use(methodOverride());
    app.use(app.router);
    app.use(function(err, req, res, next){
      // logic
    });

  p.
    미들웨어 안에서의 응답 양식은 원하는대로 작성하시면 됩니다!
    HTML 에러 페이지, 간단한 메세지, JSON 문자열이나 기타 원하는 방법으로 작성하시면 됩니다.
     
  p.  
    일반적으로 애플리케이션을 제작할 때는 여러가지 미들웨어를 사용하게 됩니다.
    예를 들면, XHR을 통해 만들어진 요청(requests)을 위한 오류 핸들러를 정의할 때, 아래처럼 합니다. 

  +js.
    var bodyParser = require('body-parser');
    var methodOverride = require('method-override');

    app.use(bodyParser());
    app.use(methodOverride());
    app.use(app.router);
    app.use(logErrors);
    app.use(clientErrorHandler);
    app.use(errorHandler);

  p.
    logErrors는 다음과 같이 정의될 수 있습니다.

  +js.
    function logErrors(err, req, res, next) {
      console.error(err.stack);
      next(err);
    }

  p.
    <code>clientErrorHandler</code>는 다음과 같이 정의될 수 있습니다.

  +js.
    function clientErrorHandler(err, req, res, next) {
      if (req.xhr) {
        res.send(500, { error: 'Something blew up!' });
      } else {
        next(err);
      }
    }

  p.
    <code>errorHandler</code>는 다음과 같이 정의될 수 있습니다.

  +js.
    function errorHandler(err, req, res, next) {
      res.status(500);
      res.render('error', { error: err });
    }
