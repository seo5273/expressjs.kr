section
  h3(id='error-handling') 오류 처리

  p.
    오류 처리 미들웨어는 다른 보통 미들웨어와 마찬가지로 정의되지만, 
    특히 오류 처리 미들웨어는 4개의 argument <code>(err, req, res, next)</code>로 정의되어야 합니다.

  +js.
    app.use(function(err, req, res, next){
      console.error(err.stack);
      res.send(500, 'Something broke!');
    });

  p.
    필수 오류 처리 미들웨어가 전형적으로 가장 마지막에 정의되는 것은 아니지만, 아래 다른 <code>app.use()</code>들은
    여기서 보이는 것과 같이 호출합니다.

  +js.
    var bodyParser = require('body-parser');
    var methodOverride = require('method-override');

    app.use(bodyParser());
    app.use(methodOverride());
    app.use(app.router);
    app.use(function(err, req, res, next){
      // logic
    });

  p.
    미들웨어 안에서의 응답(Response)은 완전히 임의적입니다.
    HTML 에러 페이지, 간단한 메세지, JSON 문자열이나 기타 원하는 방법으로 응답하세요.
     
  p.  
    조직체나 높은 레벨의 프레임워크 목적을 위해서는 보통 미들웨어를 정의하는 것과 같이
    이러한 여러 미들웨어를 정의합니다. 
    예를 들면, XHR을 통해 만들어진 요청(requests)을 위한 오류 핸들러를 정의 할 때 (그리고 요청을 제외 할 때에), 이래처럼 하세요. 

  +js.
    var bodyParser = require('body-parser');
    var methodOverride = require('method-override');

    app.use(bodyParser());
    app.use(methodOverride());
    app.use(app.router);
    app.use(logErrors);
    app.use(clientErrorHandler);
    app.use(errorHandler);

  p.
    더 포괄적(generic) <code>logErrors</code>가 에러 정보를 stderr, loggly, 혹은 비슷한 서비스들에게 요청을 보내는 부분입니다.

  +js.
    function logErrors(err, req, res, next) {
      console.error(err.stack);
      next(err);
    }

  p.
    <code>clientErrorHandler</code>가 다음과 같이 정의되는 부분입니다. 에러가 명확히 다음으로 넘어 간다는 것을 알아두세요.

  +js.
    function clientErrorHandler(err, req, res, next) {
      if (req.xhr) {
        res.send(500, { error: 'Something blew up!' });
      } else {
        next(err);
      }
    }

  p.
    아래의 <code>errorHandler</code> "catch-all" 실행은(implementation) 다음과 같이 정의됩니다.

  +js.
    function errorHandler(err, req, res, next) {
      res.status(500);
      res.render('error', { error: err });
    }
