section
  h3(id='intro') 시작하기

  p.
    노드를 설치하고 (<a href="http://nodejs.org/download">다운로드</a>),
    아래 명령어로 컴퓨터에 폴더를 만든 후, 첫 애플리케이션을 생성합니다.

  +js.
    $ mkdir hello-world

  p.
    당신이 애플리케이션 "package"를 정의하게될 폴더는, 다른 노드 package들과 다르지 않습니다.
    이 폴더 안에는 express에 종속성을 가지는 package.json파일이 필요합니다.

  +js.
    {
      "name": "hello-world",
      "description": "hello world test app",
      "version": "0.0.1",
      "private": true,
      "dependencies": {
        "express": "4.x"
      }
    }

  p.
    이제 폴더 안에 package.json파일이 있으므로, 의존성 파일들을 설치하기 위해서 
    아래와 같이 <code>npm</code>을 사용 할 수 있습니다.

  +js.
    $ npm install

  p.
    npm을 이용한 설치가 끝나면, ./node_modules 폴더에 express가 생성되어 있습니다.
    <code>npm ls</code>를 통해 아래와 같이 나오는지 확인해보세요 ^^

  +js.
    $ npm ls
    hello-world@0.0.1 /private/tmp
    └─┬ express@4.8.8
      ├─┬ accepts@1.0.7
      │ ├── mime-types@1.0.2
      │ └── negotiator@0.4.7
      ├── buffer-crc32@0.2.3
      ├── cookie@0.1.2
      ├── cookie-signature@1.0.4
      ├─┬ debug@1.0.4
      │ └── ms@0.6.2
      ├── depd@0.4.4
      ├── escape-html@1.0.1
      ├── finalhandler@0.1.0
      ├── fresh@0.2.2
      ├── media-typer@0.2.0
      ├── merge-descriptors@0.0.2
      ├── methods@1.1.0
      ├── parseurl@1.3.0
      ├── path-to-regexp@0.1.3
      ├─┬ proxy-addr@1.0.1
      │ └── ipaddr.js@0.1.2
      ├── qs@2.2.2
      ├── range-parser@1.0.0
      ├─┬ send@0.8.5
      │ ├── destroy@1.0.3
      │ ├── mime@1.2.11
      │ ├── ms@0.6.2
      │ └─┬ on-finished@2.1.0
      │   └── ee-first@1.0.5
      ├── serve-static@1.5.4
      ├─┬ type-is@1.3.2
      │ └── mime-types@1.0.2
      ├── utils-merge@1.0.0
      └── vary@0.1.0

  p.
    이제 애플케이션을 만들어 봅시다! 우선 app.js나 server.js와 같이 원하는 파일명으로 파일을 만드세요.
    그리고 <code>express()</code>를 사용하여 새 애플리케이션을 생성하세요!

  +js.
    var express = require('express');
    var app = express();

  p.
    새 애플리케이션 인스턴스로 이제 <code>app.VERB()</code>를 통해 라우트를 정의할 수 있습니다.
    <code>req</code>나 <code>res</code>은 노드가 제공하는 객체이며, 이제 <code>res.pipe()</code>, <code>req.on('data', callback)</code>나
    기타 여러가지 것들을 호출 할 수 있습니다.

  p.
    Express는 <code>res.send()</code>와 같은 메소드들을 제공합니다. 

  +js.
    app.get('/hello.txt', function(req, res){
      res.send('Hello World');
    });

  p.
    이제, 연결을 bind하고 listen 하기 위하여, node의 <a href="http://nodejs.org/api/net.html#net_server_listen_port_host_backlog_listeninglistener">net.Server#listen()</a>
    와 같은 같은 arguments를 가지는 <code>app.listen()</code> 메소드를 호출합니다. 


  +js.
    var server = app.listen(3000, function() {
        console.log('Listening on port %d', server.address().port);
    });
