section
  h3(id='users-online') 유저 온라인 카운팅

  p.
    이 섹션에서는 <a href="http://redis.io">Redis</a>을 사용하여 유저 온라인 수를 카운팅하는 full 애플리케이션(소규모)의 세부 내용을 다룹니다.
    첫번째로, redis client의 의존성과 Express 자체를 위해 의존성, 총 두개의 의존성을 지닌 package.json파일을 생성합니다.
    redis가 설치되어 있고, <code>$ redis-server</code>을 통해 실행되고 있는지 확인하시기 바랍니다.
     

  +js.
    {
      "name": "app",
      "version": "0.0.1",
      "dependencies": {
        "express": "3.x",
        "redis": "*"
      }
    }

  p.
    다음으로 애플리케이션과 redis와의 연결을 생성해야 합니다.

  +js.
    var express = require('express');
    var redis = require('redis');
    var db = redis.createClient();
    var app = express();

  p.
    Next up is the middleware for tracking online users. 
    그 다음은 온라인 유저를 트랙킹 하기 위한 미들웨어입니다. 여기서 마지막 N 밀리초 안의 온라인 유저들에 대한 쿼리를 redis로 보내기 위해 
    정렬된 세트(sorted sets)를 사용합니다. 타임 스탬프를 멤버의 "score"로서 패싱(passing)하여 사용할 수 있습니다.
    여기서 보통으로는 유저 id를 사용하는 하는 부분 대신 User-Agent 문자열을 사용한다는 것을 알아두세요.
    
  +js.
    app.use(function(req, res, next){
      var ua = req.headers['user-agent'];
      db.zadd('online', Date.now(), ua, next);
    });

  p.
    다음 미들웨어는 마지막 1분의 온라인 유저를 가지고 오기 위해 사용합니다.
    항상 최근 타임 스탬프 - 60,000 밀리초의 최소의 스코어(score)를 가진 가장 최근의 유저 정보를 얻기 위해서 
    <strong>zrevrangebyscore</strong>을 사용하여 양수 무제한 최대 값을 가져옵니다.
   

  +js.
    app.use(function(req, res, next){
      var min = 60 * 1000;
      var ago = Date.now() - min;
      db.zrevrangebyscore('online', '+inf', ago, function(err, users){
        if (err) return next(err);
        req.online = users;
        next();
      });
    });

  p.
    마지막으로 실행시키고, 포트(port)로 바인드를 합니다! 
    여기 까지 해본 후에 여러 브라우저에서 앱을 실행시킨 후, 카운트가 증가하는지 확인해보세요.
  
  +js.
    app.get('/', function(req, res){
      res.send(req.online.length + ' users online');
    });

    app.listen(3000);
